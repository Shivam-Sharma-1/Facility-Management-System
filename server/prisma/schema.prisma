// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_MYSQL")
}

enum Role {
  USER
  GROUP_DIRECTOR
  FACILITY_MANAGER
  ADMIN
}

enum ApprovalStatus {
  PENDING
  APPROVED_BY_GD
  APPROVED_BY_FM
  APPROVED_BY_ADMIN
  REJECTED_BY_GD
  REJECTED_BY_FM
  REJECTED_BY_ADMIN
  CANCELLED
}

enum CancellationStatus {
  PENDING
  NOT_REQUESTED
  CANCELLED_BY_USER
  CANCELLED_BY_FM
  APPROVED_BY_GD
  APPROVED_BY_FM
  APPROVED_BY_ADMIN
  REJECTED_BY_GD
  REJECTED_BY_FM
  REJECTED_BY_ADMIN
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id              String           @id @default(cuid())
  image           String?
  name            String
  employeeId      Int              @unique
  role            Role             @default(USER)
  password        String
  isSignedIn      Boolean          @default(false)
  bookings        Booking[]
  groupDirector   GroupDirector?
  facilityManager FacilityManager?
  group           Group?           @relation(fields: [groupId], references: [id])
  groupId         String?
}

model Booking {
  id                        String              @id @default(cuid())
  title                     String
  slug                      String              @unique
  purpose                   String              @db.Text
  requestedBy               User                @relation(fields: [userId], references: [id])
  userId                    String
  status                    ApprovalStatus      @default(PENDING)
  cancellationStatus        CancellationStatus? @default(NOT_REQUESTED)
  createdAt                 DateTime            @default(now())
  cancelledAt               DateTime?
  cancellationRequestedAt   DateTime?
  facility                  Facility            @relation(fields: [facilityId], references: [id])
  facilityId                String
  remark                    String              @default("")
  cancellationRemark        String              @default("")
  statusUpdateByGD          GroupDirector?      @relation(references: [id], fields: [groupDirectorId])
  groupDirectorId           String?
  groupDirectorName         String?
  statusUpdateByFM          FacilityManager?    @relation(references: [id], fields: [facilityManagerId])
  facilityManagerId         String?
  facilityManagerName       String?
  statusUpdateAtGD          DateTime?
  statusUpdateAtFM          DateTime?
  statusUpdateAtAdmin       DateTime?
  cancellationUpdateAtGD    DateTime?
  cancellationUpdateAtFM    DateTime?
  cancellationUpdateAtAdmin DateTime?
  time                      BookingTime         @relation(references: [id], fields: [timeId])
  timeId                    String              @unique
  group                     Group?              @relation(references: [id], fields: [groupId])
  groupId                   String?
}

model BookingTime {
  id      String   @id @default(cuid())
  date    DateTime
  start   DateTime
  end     DateTime
  booking Booking?
}

model Facility {
  id                String           @id @default(cuid())
  name              String
  description       String           @db.Text
  icon              String
  slug              String           @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  isActive          Boolean          @default(true)
  facilityManager   FacilityManager? @relation(fields: [facilityManagerId], references: [id])
  bookings          Booking[]
  facilityManagerId String?
  building          Building         @relation(fields: [buildingId], references: [id])
  buildingId        String
}

model Building {
  id       String     @id @default(cuid())
  name     String     @unique
  facility Facility[]
}

model GroupDirector {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String    @unique
  bookings Booking[]
}

model Group {
  id            String         @id @default(cuid())
  name          String         @unique
  groupDirector GroupDirector?
  users         User[]
  bookings      Booking[]
}

model FacilityManager {
  id       String     @id @default(cuid())
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @unique
  facility Facility[]
  bookings Booking[]
}
